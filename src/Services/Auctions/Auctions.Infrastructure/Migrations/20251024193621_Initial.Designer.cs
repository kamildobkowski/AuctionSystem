// <auto-generated />
using System;
using Auctions.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Auctions.Infrastructure.Migrations
{
    [DbContext(typeof(AuctionsDbContext))]
    [Migration("20251024193621_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Auctions.Domain.Entities.Auction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuctionStatsId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime?>("EndedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("SellerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("SetEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("SetStartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.ToTable("Auctions");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Auctions.Domain.Entities.AuctionStats", b =>
                {
                    b.Property<Guid>("AuctionId")
                        .HasColumnType("uuid");

                    b.Property<int>("BidderCount")
                        .HasColumnType("integer");

                    b.Property<int>("Views")
                        .HasColumnType("integer");

                    b.HasKey("AuctionId");

                    b.ToTable("AuctionStats");
                });

            modelBuilder.Entity("Auctions.Domain.Entities.Picture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AuctionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("AuctionId");

                    b.ToTable("Pictures");
                });

            modelBuilder.Entity("Auctions.Domain.Entities.BidAuction", b =>
                {
                    b.HasBaseType("Auctions.Domain.Entities.Auction");

                    b.Property<decimal>("CurrentPrice")
                        .HasPrecision(2)
                        .HasColumnType("numeric(2)");

                    b.Property<decimal?>("MinimalPrice")
                        .HasPrecision(2)
                        .HasColumnType("numeric(2)");

                    b.Property<decimal>("StartingPrice")
                        .HasPrecision(2)
                        .HasColumnType("numeric(2)");

                    b.ToTable("BidAuctions");
                });

            modelBuilder.Entity("Auctions.Domain.Entities.BuyNowAuction", b =>
                {
                    b.HasBaseType("Auctions.Domain.Entities.Auction");

                    b.Property<decimal>("Price")
                        .HasPrecision(2)
                        .HasColumnType("numeric(2)");

                    b.ToTable("BuyNowAuctions");
                });

            modelBuilder.Entity("Auctions.Domain.Entities.AuctionStats", b =>
                {
                    b.HasOne("Auctions.Domain.Entities.Auction", "Auction")
                        .WithOne("AuctionStats")
                        .HasForeignKey("Auctions.Domain.Entities.AuctionStats", "AuctionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Auction");
                });

            modelBuilder.Entity("Auctions.Domain.Entities.Picture", b =>
                {
                    b.HasOne("Auctions.Domain.Entities.Auction", "Auction")
                        .WithMany("Pictures")
                        .HasForeignKey("AuctionId");

                    b.Navigation("Auction");
                });

            modelBuilder.Entity("Auctions.Domain.Entities.BidAuction", b =>
                {
                    b.HasOne("Auctions.Domain.Entities.Auction", null)
                        .WithOne()
                        .HasForeignKey("Auctions.Domain.Entities.BidAuction", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Auctions.Domain.Entities.BuyNowAuction", b =>
                {
                    b.HasOne("Auctions.Domain.Entities.Auction", null)
                        .WithOne()
                        .HasForeignKey("Auctions.Domain.Entities.BuyNowAuction", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Auctions.Domain.Entities.Auction", b =>
                {
                    b.Navigation("AuctionStats")
                        .IsRequired();

                    b.Navigation("Pictures");
                });
#pragma warning restore 612, 618
        }
    }
}
